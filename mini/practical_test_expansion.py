#!/usr/bin/env python3
"""
Practical example of expanding test suite using ecod_schema queries

This shows the complete workflow from database query to test generation.

Usage:
    python practical_test_expansion.py --config config.yml
    python practical_test_expansion.py --config config.yml --execute
"""

import psycopg2
import yaml
import argparse
from pathlib import Path
from typing import List, Dict


# Example proteins you might find in batch 36
# (These are placeholders - run the queries to find your actual proteins)
EXAMPLE_BATCH_PROTEINS = {
    "8ovp_A": {
        "length": 569,
        "category": "validated",
        "description": "Your validated GFP-PBP fusion"
    },
    "9abc_A": {
        "length": 127,
        "category": "small_single",
        "description": "Small protein with thioredoxin-like hits"
    },
    "9def_B": {
        "length": 342,
        "category": "medium_multi",
        "description": "Medium protein with 2 domain hits"
    },
    "9xyz_A": {
        "length": 892,
        "category": "large_complex",
        "description": "Large protein with chain BLAST hits"
    }
}


def run_test_protein_queries(db_config: Dict, batch_id: int = 36) -> Dict[str, List]:
    """Run queries to find test proteins"""
    
    results = {}
    
    try:
        conn = psycopg2.connect(
            host=db_config['host'],
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password']
        )
        
        with conn.cursor() as cur:
            # Query 1: Find proteins by size
            print("Finding proteins by size...")
            cur.execute("""
                SELECT 
                    p.pdb_id || '_' || p.chain_id as protein_id,
                    p.length,
                    CASE 
                        WHEN p.length < 150 THEN 'small'
                        WHEN p.length < 400 THEN 'medium'
                        ELSE 'large'
                    END as size_category
                FROM ecod_schema.protein p
                JOIN ecod_schema.process_status ps ON p.id = ps.protein_id
                JOIN ecod_schema.process_file pf ON ps.id = pf.process_id
                WHERE ps.batch_id = %s 
                    AND pf.file_type = 'domain_summary'
                    AND pf.file_exists = true
                ORDER BY p.length
                LIMIT 30
            """, (batch_id,))
            
            results['by_size'] = cur.fetchall()
            
            # Query 2: Find proteins with all evidence
            print("Finding proteins with complete evidence...")
            cur.execute("""
                SELECT 
                    p.pdb_id || '_' || p.chain_id as protein_id,
                    p.length,
                    COUNT(DISTINCT pf.file_type) as evidence_types
                FROM ecod_schema.protein p
                JOIN ecod_schema.process_status ps ON p.id = ps.protein_id
                JOIN ecod_schema.process_file pf ON ps.id = pf.process_id
                WHERE ps.batch_id = %s 
                    AND pf.file_exists = true
                GROUP BY p.id, p.pdb_id, p.chain_id, p.length
                HAVING COUNT(DISTINCT CASE WHEN pf.file_type = 'domain_summary' THEN 1 END) > 0
                    AND COUNT(DISTINCT pf.file_type) >= 5
                ORDER BY evidence_types DESC, p.length
                LIMIT 10
            """, (batch_id,))
            
            results['high_evidence'] = cur.fetchall()
            
        conn.close()
        
    except Exception as e:
        print(f"Database error: {e}")
        
    return results


def generate_test_suite_from_queries(query_results: Dict[str, List], 
                                   output_file: str = "mini/discovered_test_proteins.py"):
    """Generate test configuration from query results"""
    
    selected_proteins = {}
    
    # Select diverse proteins from query results
    if 'by_size' in query_results:
        # Take 2 small, 2 medium, 2 large
        for protein_id, length, size_cat in query_results['by_size']:
            if len([p for p in selected_proteins.values() if p['size_category'] == size_cat]) < 2:
                selected_proteins[protein_id] = {
                    'length': length,
                    'size_category': size_cat,
                    'category': f'{size_cat}_protein'
                }
    
    # Add high evidence proteins
    if 'high_evidence' in query_results:
        for protein_id, length, evidence_count in query_results['high_evidence'][:3]:
            if protein_id not in selected_proteins:
                selected_proteins[protein_id] = {
                    'length': length,
                    'evidence_count': evidence_count,
                    'category': 'high_evidence'
                }
    
    # Generate Python file
    lines = [
        '"""',
        'Test proteins discovered from ecod_schema queries',
        'Generated by practical_test_expansion.py',
        '"""',
        '',
        '# Proteins found in batch with diverse characteristics',
        'DISCOVERED_TEST_PROTEINS = {'
    ]
    
    for protein_id, info in selected_proteins.items():
        lines.extend([
            f'    "{protein_id}": {{',
            f'        "length": {info["length"]},',
            f'        "category": "{info["category"]}",',
        ])
        
        if 'size_category' in info:
            lines.append(f'        "size_category": "{info["size_category"]}",')
        if 'evidence_count' in info:
            lines.append(f'        "evidence_count": {info["evidence_count"]},')
            
        lines.append('    },')
    
    lines.extend([
        '}',
        '',
        '# Test categories',
        'TEST_CATEGORIES = {',
        '    "small": [p for p, info in DISCOVERED_TEST_PROTEINS.items() ',
        '              if info.get("size_category") == "small"],',
        '    "medium": [p for p, info in DISCOVERED_TEST_PROTEINS.items() ',
        '               if info.get("size_category") == "medium"],',
        '    "large": [p for p, info in DISCOVERED_TEST_PROTEINS.items() ',
        '              if info.get("size_category") == "large"],',
        '    "high_evidence": [p for p, info in DISCOVERED_TEST_PROTEINS.items() ',
        '                      if info.get("category") == "high_evidence"],',
        '}'
    ])
    
    Path(output_file).parent.mkdir(exist_ok=True)
    with open(output_file, 'w') as f:
        f.write('\n'.join(lines))
    
    print(f"\nGenerated test configuration: {output_file}")
    print(f"Found {len(selected_proteins)} test proteins")


def create_simple_test_file(output_file: str = "mini/tests/test_discovered_proteins.py"):
    """Create a simple test file for discovered proteins"""
    
    test_content = '''#!/usr/bin/env python3
"""
Test cases for proteins discovered from ecod_schema
"""

import pytest
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from mini.discovered_test_proteins import DISCOVERED_TEST_PROTEINS, TEST_CATEGORIES


class TestDiscoveredProteins:
    """Test proteins discovered from database queries"""
    
    @pytest.mark.integration
    @pytest.mark.parametrize("protein_id", TEST_CATEGORIES.get("small", []))
    def test_small_proteins(self, protein_id, stable_batch_dir, 
                           real_reference_data, blast_alignments):
        """Test small proteins from batch"""
        from mini.parser import parse_domain_summary
        from mini.partitioner import partition_domains
        import os
        
        xml_path = os.path.join(stable_batch_dir, "domains", 
                               f"{protein_id}.develop291.domain_summary.xml")
        
        assert os.path.exists(xml_path), f"Domain summary not found: {xml_path}"
        
        # Parse evidence
        evidence = parse_domain_summary(
            xml_path,
            reference_lengths=real_reference_data.get("domain_lengths", {}),
            protein_lengths=real_reference_data.get("protein_lengths", {}),
            blast_alignments=blast_alignments,
            require_reference_lengths=False  # Be flexible for new proteins
        )
        
        assert evidence, "Should find some evidence"
        
        # Run partitioning
        max_pos = max(ev.query_range.segments[-1].end for ev in evidence)
        sequence_length = int(max_pos * 1.1)
        
        domains = partition_domains(
            evidence,
            sequence_length=sequence_length,
            domain_definitions=real_reference_data.get("domain_definitions", {})
        )
        
        # Basic assertions
        assert len(domains) >= 1, "Should find at least one domain"
        
        # Small proteins typically have 1 domain
        assert len(domains) <= 2, f"Small protein has {len(domains)} domains"
    
    @pytest.mark.integration
    def test_high_evidence_proteins(self, stable_batch_dir, 
                                   real_reference_data, blast_alignments):
        """Test proteins with high evidence"""
        from mini.parser import parse_domain_summary
        from mini.partitioner import partition_domains
        import os
        
        high_evidence = TEST_CATEGORIES.get("high_evidence", [])
        assert high_evidence, "No high evidence proteins found"
        
        # Test first high evidence protein
        protein_id = high_evidence[0]
        xml_path = os.path.join(stable_batch_dir, "domains", 
                               f"{protein_id}.develop291.domain_summary.xml")
        
        evidence = parse_domain_summary(
            xml_path,
            reference_lengths=real_reference_data.get("domain_lengths", {}),
            protein_lengths=real_reference_data.get("protein_lengths", {}),
            blast_alignments=blast_alignments,
            require_reference_lengths=False
        )
        
        # High evidence proteins should have lots of hits
        assert len(evidence) > 10, f"Expected many hits, got {len(evidence)}"
        
        # Should produce clear domain assignments
        max_pos = max(ev.query_range.segments[-1].end for ev in evidence)
        sequence_length = int(max_pos * 1.1)
        
        domains = partition_domains(
            evidence,
            sequence_length=sequence_length,
            domain_definitions=real_reference_data.get("domain_definitions", {})
        )
        
        assert domains, "High evidence protein should have clear domains"
'''
    
    Path(output_file).parent.mkdir(parents=True, exist_ok=True)
    with open(output_file, 'w') as f:
        f.write(test_content)
    
    print(f"Generated test file: {output_file}")


def main():
    parser = argparse.ArgumentParser(
        description='Practical test expansion using ecod_schema'
    )
    
    parser.add_argument('--config', required=True,
                       help='Database configuration file')
    parser.add_argument('--batch-id', type=int, default=36,
                       help='Batch ID to query')
    parser.add_argument('--execute', action='store_true',
                       help='Execute queries and generate files')
    
    args = parser.parse_args()
    
    # Load config
    with open(args.config, 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    if args.execute:
        # Run queries
        print(f"Querying ecod_schema for batch {args.batch_id}...")
        results = run_test_protein_queries(db_config, args.batch_id)
        
        if results:
            # Generate test configuration
            generate_test_suite_from_queries(results)
            
            # Create test file
            create_simple_test_file()
            
            print("\n✅ Test suite generated!")
            print("\nNext steps:")
            print("1. Review mini/discovered_test_proteins.py")
            print("2. Run: pytest mini/tests/test_discovered_proteins.py -v")
            print("3. Add more specific test cases as needed")
        else:
            print("No query results obtained")
    else:
        print("Example workflow:")
        print("1. Run with --execute to query database and generate files")
        print("2. Review the generated protein list")
        print("3. Run the generated tests")
        print("\nExample proteins you might find:")
        for protein_id, info in list(EXAMPLE_BATCH_PROTEINS.items())[:5]:
            print(f"  {protein_id}: {info['description']} ({info['length']} residues)")


if __name__ == "__main__":
    main()
